import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import kotlin.test.assertEquals
import kotlin.test.assertNotEquals

class JsonObjectTest {

    // This method creates and returns a JsonObject with some predefined values
    private fun testJsonobject(): JsonObject{
        val jsonObject = JsonObject()
        jsonObject.put("uc", "PA")
        jsonObject.put("ects", 6.0)
        jsonObject.put("data-exame", null)
        val jsonArray = JsonArray()
        jsonArray.add(JsonObject().apply {
            put("numero", 101101)
            put("nome", "Dave Farley")
            put("internacional", true)
        })
        jsonArray.add(JsonObject().apply {
            put("numero", 101102)
            put("nome", "Martin Fowler")
            put("internacional", true)
        })
        jsonArray.add(JsonObject().apply {
            put("numero", 26503)
            put("nome", "André Santos")
            put("internacional", false)
        })
        jsonObject.put("inscritos", jsonArray)
        return jsonObject
    }

    // This method creates and returns a JsonObject with some predefined values that are intended to fail certain tests
    private fun testJsonobject_fails(): JsonObject{
        val jsonObject = JsonObject()
        jsonObject.put("uc", "PA")
        jsonObject.put("ects", 6.0)
        jsonObject.put("data-exame", null)
        val jsonArray = JsonArray()
        jsonArray.add(JsonObject().apply {
            put("numero", 101101)
            put("nome", "Dave Farley")
            put("internacional", true)
        })
        jsonArray.add(JsonObject().apply {
            put("numero", 101102)
            put("nome", "Martin Fowler")
            put("internacional", "Carvalho")
        })
        jsonArray.add(JsonObject().apply {
            put("numero", "Gui")
            put("nome", 92908)
            put("nome22", false)
        })
        jsonObject.put("inscritos", jsonArray)
        return jsonObject
    }

    // This method creates an object and converts it to a JsonObject using the ObjectToJson class
    private fun testJsonObject_ObjectToJson ():JsonObject {
        val alunos = mutableListOf<Aluno>()
        alunos.add(Aluno(101101, "Dave Farley", true))
        alunos.add(Aluno(101102, "Martin Fowler", true))
        alunos.add(Aluno(26503, "André Santos", false))
        return objectToJson(Cadeira("PA", 6.0, null, "abc", alunos))
    }

    // Check if the value stored for the key "key" is equal to "value"
    @Test
    fun testPutAndGet() {
        val jsonObject = JsonObject()
        jsonObject.put("key", "value")
        assertEquals("value", jsonObject.get("key"))
    }

    // Check if an exception of type IllegalArgumentException is thrown when trying to store a list as a value
    @Test
    fun testPutAndGet_Fail_Argument_List() {
        val jsonObject = JsonObject()
        assertThrows<IllegalArgumentException> {
            jsonObject.put("key", listOf(1,2,3))
        }
    }

    // Check if an exception of type IllegalArgumentException is thrown when trying to store an enum as a value
    @Test
    fun testPutAndGet_Fail_Argument_Enum() {
        val jsonObject = JsonObject()
        assertThrows<IllegalArgumentException> {
            jsonObject.put("key", MyEnumTest.A)
        }
    }

    // Check if an exception of type IllegalArgumentException is thrown when trying to store an object from a data class (in this case, a Point object) as a value
    @Test
    fun testPutAndGet_Fail_Argument_Data_Class() {
        val jsonObject = JsonObject()
        assertThrows<IllegalArgumentException> {
            jsonObject.put("key", Point(1,1))
        }
    }

    // Check if the string representation of the JsonObject is equal to the expected string
    @Test
    fun testJsonToString() {
        val jsonObject = testJsonobject()
        assertEquals(jsonObject.toString(), "{\n" +
                " \"uc\" : PA,\n" +
                " \"ects\" : 6.0,\n" +
                " \"data-exame\" : null,\n" +
                " \"inscritos\" : [\n" +
                "{\n" +
                " \"numero\" : 101101,\n" +
                " \"nome\" : Dave Farley,\n" +
                " \"internacional\" : true\n" +
                "},\n" +
                "  {\n" +
                " \"numero\" : 101102,\n" +
                " \"nome\" : Martin Fowler,\n" +
                " \"internacional\" : true\n" +
                "},\n" +
                "  {\n" +
                " \"numero\" : 26503,\n" +
                " \"nome\" : André Santos,\n" +
                " \"internacional\" : false\n" +
                "}\n" +
                "]\n" +
                "}")
    }

    // Accept the visitor and check if the list of values generated by the visitor for the key (in this case, "numero") is equal to the expected list
    @Test
    fun testJsonGetValuesForKey_True() {
        val jsonObject = testJsonobject()
        val visitor = GetValuesForKey("numero")
        jsonObject.accept(visitor)
        assertEquals(visitor.getList(), listOf<Any?>(101101, 101102, 26503))
    }

    // Accept the visitor and check if the list of values generated by the visitor for the key (in this case, "numero") is not equal to the expected list
    @Test
    fun testJsonGetValuesForKey_Fail() {
        val jsonObject = testJsonobject()
        val visitor = GetValuesForKey("numero")
        jsonObject.accept(visitor)
        assertNotEquals(visitor.getList(), listOf<Any?>(101101, 101102, 92908))
    }

    // Accept the visitor and check if the list of values generated by the visitor for the keys (in this case, "numero" and "nome") is equal to the expected list
    @Test
    fun testJsonGetJsonObjectsForProperties() {
        val jsonObject = testJsonobject()
        val visitor = GetJsonObjectsForProperties(listOf("numero", "nome"))
        jsonObject.accept(visitor)
        assertEquals(visitor.getList().toString(), "[{\n" +
                " \"numero\" : 101101,\n" +
                " \"nome\" : Dave Farley,\n" +
                " \"internacional\" : true\n" +
                "}, " +
                "{\n" +
                " \"numero\" : 101102,\n" +
                " \"nome\" : Martin Fowler,\n" +
                " \"internacional\" : true\n" +
                "}, " +
                "{\n" +
                " \"numero\" : 26503,\n" +
                " \"nome\" : André Santos,\n" +
                " \"internacional\" : false\n" +
                "}]")
    }

    // Accept the visitor and check if the list of values generated by the visitor for the keys (in this case, "numero" and "nome") is not equal to the expected list
    @Test
    fun testJsonGetJsonObjectsForProperties_Fail() {
        val jsonObject = testJsonobject_fails()
        val visitor = GetJsonObjectsForProperties(listOf("numero", "nome"))
        jsonObject.accept(visitor)
        assertNotEquals(visitor.getList().toString(), "[{\n" +
                " \"numero\" : 101101,\n" +
                " \"nome\" : Dave Farley,\n" +
                " \"internacional\" : true\n" +
                "}, " +
                "{\n" +
                " \"numero\" : 101102,\n" +
                " \"nome\" : Martin Fowler,\n" +
                " \"internacional\" : true\n" +
                "}, " +
                "{\n" +
                " \"numero\" : 26503,\n" +
                " \"nome\" : André Santos,\n" +
                " \"internacional\" : false\n" +
                "}]")
    }

    // Accept the visitor and check if all values for the key (in this case, "numero") in the JsonObject are numbers (true)
    @Test
    fun testJsonkeyWithValuesOfSameType_Number_True() {
        val jsonObject = testJsonobject()
        val visitor = KeyWithValuesOfSameType("numero", Number::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), true)
    }

    // Accept the visitor and check if all values for the key (in this case, "numero") in the JsonObject are numbers (false)
    @Test
    fun testJsonkeyWithValuesOfSameType_Number_False() {
        val jsonObject = testJsonobject_fails()
        val visitor = KeyWithValuesOfSameType("numero", Number::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), false)
    }

    // Accept the visitor and check if all values for the key (in this case, "internacional") in the JsonObject are Boolean (true)
    @Test
    fun testJsonkeyWithValuesOfSameType_Boolean_True() {
        val jsonObject = testJsonobject()
        val visitor = KeyWithValuesOfSameType("internacional", Boolean::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), true)
    }

    // Accept the visitor and check if all values for the key (in this case, "internacional") in the JsonObject are Boolean (false)
    @Test
    fun testJsonkeyWithValuesOfSameType_Boolean_False() {
        val jsonObject = testJsonobject_fails()
        val visitor = KeyWithValuesOfSameType("internacional", Boolean::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), false)
    }

    // Accept the visitor and check if all values for the key (in this case, "nome") in the JsonObject are String (True)
    @Test
    fun testJsonkeyWithValuesOfSameType_String_True() {
        val jsonObject = testJsonobject()
        val visitor = KeyWithValuesOfSameType("nome", String::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), true)
    }

    // Accept the visitor and check if all values for the key (in this case, "nome") in the JsonObject are String (false)
    @Test
    fun testJsonkeyWithValuesOfSameType_String_False() {
        val jsonObject = testJsonobject_fails()
        val visitor = KeyWithValuesOfSameType("nome", String::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), false)
    }

    // Accept the visitor and check if all values for the key (in this case, "inscritos") in the JsonObject are JsonElement (True)
    @Test
    fun testJsonkeyWithValuesOfSameType_JsonElement_True() {
        val jsonObject = testJsonobject()
        val visitor = KeyWithValuesOfSameType("inscritos", JsonElement::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), true)
    }

    // Accept the visitor and check if all values for the key (in this case, "nome") in the JsonObject are JsonElement (false)
    @Test
    fun testJsonkeyWithValuesOfSameType_JsonElement_False() {
        val jsonObject = testJsonobject_fails()
        val visitor = KeyWithValuesOfSameType("nome", JsonElement::class)
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), false)
    }

    // Accept the visitor and check if all objects in the array have the same keys (true)
    @Test
    fun testJsonArrayWithSameTypeTrue() {
        val jsonObject = testJsonobject()
        val visitor = ArrayWithSameType()
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), true)
    }

    // Accept the visitor and check if all objects in the array have the same keys (false)
    @Test
    fun testJsonArrayWithSameTypeFalse() {
        val jsonObject = testJsonobject_fails()
        val visitor = ArrayWithSameType()
        jsonObject.accept(visitor)
        assertEquals(visitor.areValuesSameType(), false)
    }

    // Verify if the converted JsonObject with the objectToJson is equals to what is expected
    @Test
    fun testObjectToJson(){
        val jsonObject = testJsonobject()
        val jsonObjectObjectToJson = testJsonObject_ObjectToJson()
        assertEquals(jsonObjectObjectToJson.toString(), jsonObject.toString())
    }
}